version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=snbspassword
      - POSTGRES_USER=snbsuser
      - POSTGRES_DB=snbsdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snbsuser -d snbsdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3.11-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=snbsuser
      - RABBITMQ_DEFAULT_PASS=snbspassword
      - RABBITMQ_DEFAULT_VHOST=snbs
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api_service:
    build:
      context: ./backend
      dockerfile: api_service/Dockerfile
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DEBUG=True
      - SECRET_KEY=your_api_service_secret_key
      - DATABASE_URL=postgres://snbsuser:snbspassword@postgres:5432/snbsdb
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - JWT_SECRET_KEY=your_jwt_secret
      - API_VERSION=v1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=snbsuser
      - RABBITMQ_PASSWORD=snbspassword
      - RABBITMQ_VHOST=snbs
    command: python api_service/manage.py runserver 0.0.0.0:8000

  # Auth Service
  auth_service:
    build:
      context: ./backend
      dockerfile: auth_service/Dockerfile
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DEBUG=True
      - SECRET_KEY=your_auth_service_secret_key
      - DATABASE_URL=postgres://snbsuser:snbspassword@postgres:5432/snbsdb
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - JWT_SECRET_KEY=your_jwt_secret
      - API_VERSION=v1
    command: python auth_service/manage.py runserver 0.0.0.0:8001

  # Scraper Service
  scraper_service:
    build:
      context: ./backend
      dockerfile: scraper_service/Dockerfile
    volumes:
      - ./backend:/app
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DEBUG=True
      - SECRET_KEY=your_scraper_service_secret_key
      - DATABASE_URL=postgres://snbsuser:snbspassword@postgres:5432/snbsdb
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - API_VERSION=v1
      - SNBS_BASE_URL=https://nbs.gov.so/
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=snbsuser
      - RABBITMQ_PASSWORD=snbspassword
      - RABBITMQ_VHOST=snbs
    command: python scraper_service/manage.py runserver 0.0.0.0:8002

  # Frontend
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_AUTH_URL=http://localhost:8001/api/auth
    depends_on:
      - api_service
      - auth_service
    command: npm start

volumes:
  postgres_data:
  rabbitmq_data:
